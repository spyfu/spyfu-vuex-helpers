{"version":3,"file":null,"sources":["../lib/helpers/map_two_way_state.js","../lib/index.js"],"sourcesContent":["/**\r\n * Helper to map vuex state to two way computed properties.\r\n *\r\n * @param  {string|Object}  namespaceArg    the module namespace, or state mappings\r\n * @param  {Object}         mappingsArg     state mappings\r\n * @return {Object}\r\n */\r\nexport default function (namespaceArg, mappingsArg) {\r\n    // parse the arguments and normalize the mappings\r\n    const { namespace, mappings } = getArgs(namespaceArg, mappingsArg);\r\n    const normalizedMappings = normalizeMappings(mappings);\r\n\r\n    // take our normalized mappings and turn them into getComputedGetters and getComputedSetters\r\n    const twoWayMappings = {};\r\n\r\n    Object.keys(normalizedMappings).forEach((key) => {\r\n        twoWayMappings[key] = {\r\n            get: getComputedGetter(namespace, normalizedMappings[key]),\r\n            set: getComputedSetter(namespace, normalizedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return twoWayMappings;\r\n}\r\n\r\n// helper function to parse the arguments\r\nfunction getArgs(first, second) {\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// helper function to normalize two way state mappings\r\nfunction normalizeMappings(mappings) {\r\n    const normalizedMappings = {};\r\n\r\n    Object.keys(mappings).forEach((key) => {\r\n        const value = mappings[key];\r\n\r\n        if (typeof value === 'string') {\r\n            normalizedMappings[key] = { key, mutation: value };\r\n        } else {\r\n            normalizedMappings[key] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return normalizedMappings;\r\n}\r\n\r\n// helper to create a getComputedGetter for two way mapped state\r\nfunction getComputedGetter(namespace, mapping) {\r\n    if (typeof namespace === 'string') {\r\n        return function set() {\r\n            return this.$store.state[namespace][mapping.key];\r\n        };\r\n    }\r\n\r\n    return function set() {\r\n        return this.$store.state[mapping.key];\r\n    };\r\n}\r\n\r\n// helper to create a getComputedSetter for two way mapped state\r\nfunction getComputedSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (typeof namespace === 'string') {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function set (value) {\r\n        this.$store.commit(mutation, value)\r\n    }\r\n}\r\n","import mapTwoWayState from './helpers/map_two_way_state';\n\nmodule.exports = {\n    mapTwoWayState,\n}\n"],"names":["getArgs","first","second","namespace","mappings","normalizeMappings","normalizedMappings","keys","forEach","key","value","mutation","getComputedGetter","mapping","this","$store","state","getComputedSetter","commit","namespaceArg","mappingsArg","twoWayMappings","module","exports"],"mappings":"AA0BA,SAASA,QAAQC,EAAOC,SACI,iBAAVD,GACNE,UAAWF,EAAOG,SAAUF,IAC5BC,UAAW,KAAMC,SAAUH,GAIvC,SAASI,kBAAkBD,OACjBE,mBAECC,KAAKH,GAAUI,QAAQ,SAACC,OACrBC,EAAQN,EAASK,KAGAA,GADF,iBAAVC,GACqBD,MAAKE,SAAUD,IAEfD,IAAKC,EAAMD,IAAKE,SAAUD,EAAMC,YAI7DL,EAIX,SAASM,kBAAkBT,EAAWU,SACT,iBAAdV,EACA,kBACIW,KAAKC,OAAOC,MAAMb,GAAWU,EAAQJ,MAI7C,kBACIK,KAAKC,OAAOC,MAAMH,EAAQJ,MAKzC,SAASQ,kBAAkBd,EAAWC,OAC9BO,EAAWP,EAASO,eAEC,iBAAdR,MACIA,EAAY,IAAMQ,GAG1B,SAAcD,QACZK,OAAOG,OAAOP,EAAUD,IAhErC,mBAAe,SAAUS,EAAcC,SAEHpB,QAAQmB,EAAcC,GAA9CjB,IAAAA,UACFG,EAAqBD,oBADRD,UAIbiB,mBAECd,KAAKD,GAAoBE,QAAQ,SAACC,KACtBA,QACNG,kBAAkBT,EAAWG,EAAmBG,QAChDQ,kBAAkBd,EAAWG,EAAmBG,OAItDY,GCpBXC,OAAOC"}