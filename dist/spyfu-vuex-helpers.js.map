{"version":3,"file":"spyfu-vuex-helpers.js","sources":["../lib/helpers/find_instance_then.js","../lib/helpers/instance_getters.js","../lib/helpers/instance_mutations.js","../lib/helpers/utils/get_entries.js","../lib/helpers/utils/compose.js","../lib/helpers/utils/key_value_to_object.js","../lib/helpers/map_instance_getters.js","../lib/helpers/utils/parsers.js","../lib/helpers/utils/resolve_object_path.js","../lib/helpers/map_instance_state.js","../lib/helpers/map_two_way_state.js","../lib/helpers/simple_instance_setters.js","../lib/helpers/utils/error.js","../lib/helpers/simple_pushers.js","../lib/helpers/simple_setters.js"],"sourcesContent":["/**\r\n * Find a state instance, and execute a callback if found.\r\n *\r\n * @param  {Object|Function}    required    the config object, or mutation callback\r\n * @param  {Function}           optional    mutation callback\r\n * @return {Function}\r\n */\r\nconst findInstanceThen = function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is an object, we will use that as the\r\n    // config, and the second arg as the mutation handler\r\n    const { config, callback } = parseArguments(arguments);\r\n\r\n    return (state, payload) => {\r\n        if (stateAndPayloadAreValid(config, state, payload)) {\r\n\r\n            // find our instance based on the current configuration\r\n            const instance = state[config.stateKey].find(obj => {\r\n                return obj[config.instanceKey] === payload[config.instanceKey];\r\n            });\r\n\r\n            // if the instance was found, execute our mutation callback\r\n            if (instance) {\r\n                callback(instance, payload, state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this method allows us to easily apply configuration to the helper\r\nfindInstanceThen.config = opts => findInstanceThen.bind(null, opts);\r\n\r\n// helper to get config and callback from the arguments\r\nfunction parseArguments(args) {\r\n    let defaultConfig = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    if (typeof args[0] === 'function') {\r\n        return {\r\n            callback: args[0],\r\n            config: defaultConfig,\r\n        }\r\n    } else {\r\n        return {\r\n            callback: args[1],\r\n            config: Object.assign({}, defaultConfig, args[0]),\r\n        };\r\n    }\r\n}\r\n\r\n// check if the state or payload is malformed\r\nfunction stateAndPayloadAreValid(config, state, payload) {\r\n\r\n    // ensure that the instances array exists\r\n    if (! Array.isArray(state[config.stateKey])) {\r\n        console.error(`State does not contain an \"${ config.stateKey }\" array.`);\r\n        return false;\r\n    }\r\n\r\n    // ensure that the payload contains an id\r\n    if (typeof payload !== 'object' || typeof payload[config.instanceKey] === 'undefined') {\r\n        console.error(`Mutation payloads must be an object with an \"${ config.instanceKey }\" property.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default findInstanceThen;\r\n","\r\n/**\r\n * Instance getters.\r\n *\r\n * @return {Object}\r\n */\r\nexport default function() {\r\n    const { getters, options } = parseArguments(arguments);\r\n\r\n    return Object.keys(getters).reduce((instanceGetters, name) => {\r\n        instanceGetters[name] = (state, otherGetters) => instanceKey => {\r\n            const instance = state[options.stateKey || 'instances'].find(obj => {\r\n                return obj[options.instanceKey || 'id'] === instanceKey;\r\n            });\r\n\r\n            if (instance) {\r\n                return getters[name](instance, otherGetters, state, instanceKey);\r\n            }\r\n        };\r\n\r\n        return instanceGetters;\r\n    }, {});\r\n}\r\n\r\n// parse arguments\r\nfunction parseArguments(args) {\r\n    const hasOptionsArg = args.length > 1;\r\n\r\n    return {\r\n        options: hasOptionsArg ? args[0] : {},\r\n        getters: hasOptionsArg ? args[1] : args[0],\r\n    };\r\n}\r\n","import findInstanceThen from './find_instance_then';\r\n\r\n/**\r\n * Instance mutations.\r\n *\r\n * @return {Object}\r\n */\r\nexport default function() {\r\n    const { options, mutations } = parseArguments(arguments);\r\n\r\n    return Object.keys(mutations).reduce((instanceMutations, name) => {\r\n        instanceMutations[name] = findInstanceThen(options, mutations[name]);\r\n\r\n        return instanceMutations;\r\n    }, {});\r\n}\r\n\r\n// parse arguments\r\nfunction parseArguments(args) {\r\n    const hasOptionsArg = args.length > 1;\r\n\r\n    const defaultOptions = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    return {\r\n        options: hasOptionsArg ? args[0] : defaultOptions,\r\n        mutations: hasOptionsArg ? args[1] : args[0],\r\n    };\r\n}\r\n","// Similar to Object.entries but without using polyfill\r\nexport default function (obj) {\r\n    return Object.keys(obj).map(key => [ key, obj[key] ]);\r\n}\r\n","// Function to compose other functions (right to left evaluation)\r\nexport default function () {\r\n    const fns = arguments;\r\n\r\n    return function () {\r\n        let result;\r\n        \r\n        for (let i = fns.length - 1; i > -1; i--) {\r\n            if (i === fns.length - 1) {\r\n                result = fns[i].apply(fns[i], arguments);\r\n            } else {\r\n                result = fns[i].call(this, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n}\r\n","// Convert KeyValuePair[] to Object\r\nexport default function (obj, keyValuePair) {\r\n    const [ key, value ] = keyValuePair;\r\n    obj[key] = value;\r\n\r\n    return obj;\r\n}\r\n","import { mapGetters } from 'vuex';\r\nimport getEntries from './utils/get_entries';\r\nimport compose from './utils/compose';\r\nimport toObject from './utils/key_value_to_object';\r\n\r\n// Create a wrapper function which invokes the original function\r\n// passing in `this.id`\r\nconst wrapGetterFn = ([ key, originalFn ]) => {\r\n    const newFn = function () {\r\n        const innerFn = originalFn.apply(this, arguments);\r\n\r\n        if (typeof innerFn !== 'function') {\r\n            /* istanbul ignore next */\r\n            throw `The getter ${key} does not return a function. Try using the 'mapGetter' helper instead`;\r\n        }\r\n        \r\n        return innerFn(this.id);\r\n    };\r\n\r\n    return [ key, newFn ];\r\n};\r\n\r\nfunction invokeGettersWithId (getters) {\r\n    return getEntries(getters)\r\n        .map(wrapGetterFn)\r\n        .reduce(toObject, {});\r\n}\r\n\r\nconst mapInstanceGetters = compose(invokeGettersWithId, mapGetters);\r\n\r\nexport default mapInstanceGetters;\r\n","export function parseMappingArguments(args) {\r\n    // namespace is optional\r\n    const namespace = typeof args[0] === 'string' ? args[0] : null;\r\n\r\n    // mappings are required\r\n    const mappings = namespace ? args[1] : args[0];\r\n\r\n    // by default, the vm identifier key will be 'id'\r\n    const vmIdentifierKey = (namespace ? args[2] : args[1]) || 'id';\r\n\r\n    // by default, the instance identifier will be 'id'\r\n    const stateKey = 'instances';\r\n\r\n    // by default, the state key will be 'instances'\r\n    const instanceIdentifierKey = 'id';\r\n\r\n    return {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n     };\r\n}\r\n","/**\r\n * Helper function for resolving nested object values.\r\n *\r\n * @param  {Object}         obj         source object\r\n * @param  {Array|String}   path        path to nested value\r\n * @param  {String|RegExp}  delimeter   characters / pattern to split path on\r\n * @return {mixed}\r\n */\r\nexport default function(obj, path, delimeter = '.') {\r\n    const pathArray = Array.isArray(path) ? path : path.split(delimeter);\r\n\r\n    return pathArray.reduce((p, item) => p && p[item], obj);\r\n}\r\n","import { parseMappingArguments } from './utils/parsers';\r\nimport resolveObjectPath from './utils/resolve_object_path';\r\n\r\nexport default function() {\r\n    // extract our namespace and mappings from the arguments\r\n    const {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n    } = parseMappingArguments(arguments);\r\n\r\n    // normalize our mappings\r\n    const normalizedMappings = normalizeMappings(mappings);\r\n\r\n    // create a getter for each mapped piece of state\r\n    const computedProperties = {};\r\n\r\n    Object.keys(normalizedMappings).forEach((key) => {\r\n        const computedKey = key.split('.').pop();\r\n\r\n        computedProperties[computedKey] = createGetter({\r\n            key,\r\n            namespace,\r\n            normalizedMappings,\r\n            vmIdentifierKey,\r\n            instanceIdentifierKey,\r\n            stateKey,\r\n        });\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// normalize the mappings into a consistent object format\r\nfunction normalizeMappings(mappings) {\r\n    if (Array.isArray(mappings)) {\r\n        return mappings.reduce((normalizedMappings, key) => {\r\n            normalizedMappings[key] = key;\r\n\r\n            return normalizedMappings;\r\n        }, {});\r\n    }\r\n\r\n    return mappings;\r\n}\r\n\r\n// create a getter for a particular piece of state\r\nfunction createGetter({ key, namespace, normalizedMappings, vmIdentifierKey, instanceIdentifierKey, stateKey }) {\r\n    return function() {\r\n        // find the state object\r\n        const state = namespace\r\n            ? resolveObjectPath(this.$store.state, namespace, '/')\r\n            : this.$store.state;\r\n\r\n        // find our container of instances\r\n        const instancesContainer = resolveObjectPath(state, stateKey, '.');\r\n\r\n        // find our instance within it\r\n        const instance = instancesContainer.find(obj => obj[instanceIdentifierKey] === this[vmIdentifierKey]);\r\n\r\n        // and if all goes well, resolve the piece of state we're looking for\r\n        if (instance) {\r\n            return typeof normalizedMappings[key] === 'function'\r\n                ? normalizedMappings[key](instance)\r\n                : resolveObjectPath(instance, normalizedMappings[key]);\r\n        }\r\n    }\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Map vuex state with two way computed properties\r\n *\r\n * @param  {string|Object}  required the module namespace, or state mappings\r\n * @param  {Object}         optional state mappings\r\n * @return {Object}\r\n */\r\nexport default function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is a string, we will use that as the\r\n    // namespace, and the next arg as the state mapping\r\n    const { namespace, mappings } = parseArguments(arguments);\r\n\r\n    // then get the key and mutation names from our mappings\r\n    const parsedMappings = parseMappings(mappings);\r\n\r\n    // and last, turn them into getters and setters\r\n    const computedProperties = {};\r\n\r\n    Object.keys(parsedMappings).forEach((key) => {\r\n        computedProperties[key] = {\r\n            get: createGetter(namespace, parsedMappings[key]),\r\n            set: createSetter(namespace, parsedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// determine the values of our namespace and mappings\r\nfunction parseArguments(args) {\r\n    const first = args[0];\r\n    const second = args[1];\r\n\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// determine our key and mutation values\r\nfunction parseMappings(obj) {\r\n    const mapping = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        const value = obj[key];\r\n        const vmKey = key.slice(key.lastIndexOf('.') + 1);\r\n\r\n        if (typeof value === 'string') {\r\n            mapping[vmKey] = { key, mutation: value };\r\n        } else {\r\n            mapping[vmKey] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return mapping;\r\n}\r\n\r\n// create a getter for computed properties\r\nfunction createGetter(namespace, mapping) {\r\n    if (namespace) {\r\n        return function () {\r\n            const state = resolveObjectPath(this.$store.state, namespace, '/');\r\n\r\n            return resolveObjectPath(state, mapping.key, '.');\r\n        };\r\n    }\r\n\r\n    return function () {\r\n        return resolveObjectPath(this.$store.state, mapping.key, '.');\r\n    };\r\n}\r\n\r\n// create a setter for computed properties\r\nfunction createSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (namespace) {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function (value) {\r\n        this.$store.commit(mutation, value)\r\n    };\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set an instance's state equal to a value.\r\n *\r\n * @param  {Object}\r\n * @param  {String}\r\n * @param  {String}\r\n * @return {Object}\r\n */\r\nexport default function(\r\n    setters,\r\n    stateKey = 'instances',\r\n    instanceKey = 'id'\r\n) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, payload) {\r\n                // find the instance that we're mutating\r\n                const instance = findInstance(state, stateKey, instanceKey, payload);\r\n\r\n                if (instance) {\r\n                    const value = findValue(payload, instanceKey);\r\n\r\n                    // if the setter name has a dot, then resolve the\r\n                    // state path before feeding our value into it.\r\n                    if (setters[name].indexOf('.') > -1) {\r\n                        const obj = setters[name].split('.');\r\n                        const key = obj.pop();\r\n\r\n                        resolveObjectPath(instance, obj)[key] = value;\r\n                    } else {\r\n                        // otherwise, just set the instance state to our value\r\n                        instance[setters[name]] = value;\r\n                    }\r\n                } else {\r\n                    // if the instance wasn't found, let the dev know with a warning\r\n                    console.warn (`An instance with an identifier of ${instanceKey} was not found.`);\r\n                }\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n\r\n// helper function to find the correct instance\r\nfunction findInstance(state, stateKey, instanceKey, payload) {\r\n    return state[stateKey].find(obj => obj[instanceKey] === payload[instanceKey]);\r\n}\r\n\r\n// helper function to find the payload value\r\nfunction findValue(payload, instanceKey) {\r\n    for (let key in payload) {\r\n        if (key !== instanceKey) {\r\n            return payload[key];\r\n        }\r\n    }\r\n\r\n    // if we don't have a value, throw an error because the payload is invalid.\r\n    /* istanbul ignore next */\r\n    throw new Error('Failed to mutate instance, no value found in payload.', payload);\r\n}\r\n","// helper to throw consistent errors\r\n// this is useful in testing to make sure caught errors are ours\r\nexport default function(message, ...args) {\r\n    throw new Error('[spyfu-vuex-helpers]: ' + message, ...args);\r\n}","import error from './utils/error';\r\nimport resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations pushes values onto an array.\r\n *\r\n * @param  {Object} pushers Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(pushers) {\r\n    return Object.keys(pushers).reduce((mutations, name) => {\r\n        return {\r\n            ...mutations,\r\n            [name](state, value) {\r\n                const mutationName = pushers[name];\r\n\r\n                // if the pusher name has a dot, then resolve the\r\n                // array path before pushing our value onto it\r\n                if (mutationName.indexOf('.') > -1) {\r\n                    const obj = mutationName.split('.');\r\n                    const key = obj.pop();\r\n                    const parentObj = resolveObjectPath(state, obj);\r\n\r\n                    // dev errors\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // target path must resolve to an array\r\n                        if (!parentObj || typeof parentObj[key] === 'undefined') {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is undefined.`);\r\n                        } else if (!Array.isArray(parentObj[key])) {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is not an array, ${typeof parentObj[key]} found.`);\r\n                        }\r\n                    }\r\n                    \r\n                    parentObj[key].push(value);\r\n                }\r\n\r\n                // otherwise, just push our value onto the array\r\n                else {\r\n\r\n                    // dev errors\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // target must be an array\r\n                        if (typeof state[mutationName] === 'undefined') {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is undefined.`);\r\n                        } else if (!Array.isArray(state[mutationName])) {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is not an array, ${typeof state[mutationName]} found.`);\r\n                        }\r\n                    }\r\n\r\n                    state[mutationName].push(value);\r\n                }\r\n            },\r\n        }\r\n    }, {});\r\n}","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set a piece of state equal to a value.\r\n *\r\n * @param  {Object} setters     Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(setters) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, value) {\r\n\r\n                // if the setter name has a dot, then resolve the\r\n                // state path before feeding our value into it.\r\n                if (setters[name].indexOf('.') > -1) {\r\n                    const obj = setters[name].split('.');\r\n                    const key = obj.pop();\r\n\r\n                    resolveObjectPath(state, obj)[key] = value;\r\n                }\r\n\r\n                // otherwise, just set the state to our value\r\n                else state[setters[name]] = value;\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n"],"names":["findInstanceThen","parseArguments","arguments","config","callback","state","payload","stateAndPayloadAreValid","instance","stateKey","find","obj","instanceKey","bind","opts","args","defaultConfig","Object","assign","Array","isArray","console","error","getters","options","keys","reduce","instanceGetters","name","otherGetters","hasOptionsArg","length","mutations","instanceMutations","defaultOptions","map","key","fns","result","i","apply","call","keyValuePair","value","wrapGetterFn","originalFn","newFn","innerFn","id","invokeGettersWithId","getEntries","toObject","mapInstanceGetters","compose","mapGetters","parseMappingArguments","namespace","mappings","vmIdentifierKey","instanceIdentifierKey","path","delimeter","pathArray","split","p","item","normalizedMappings","normalizeMappings","computedProperties","forEach","computedKey","pop","createGetter","resolveObjectPath","$store","instancesContainer","parsedMappings","parseMappings","get","set","createSetter","first","second","mapping","vmKey","slice","lastIndexOf","mutation","commit","setters","findInstance","findValue","indexOf","warn","Error","message","pushers","mutationName","parentObj","process","env","NODE_ENV","push"],"mappings":"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"}