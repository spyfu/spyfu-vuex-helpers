{"version":3,"file":"spyfu-vuex-helpers.esm.js","sources":["../lib/helpers/find_instance_then.js","../lib/helpers/utils/get_entries.js","../lib/helpers/utils/compose.js","../lib/helpers/utils/key_value_to_object.js","../lib/helpers/map_instance_getters.js","../lib/helpers/utils/parsers.js","../lib/helpers/utils/resolve_object_path.js","../lib/helpers/map_instance_state.js","../lib/helpers/map_two_way_state.js","../lib/helpers/simple_instance_setters.js","../lib/helpers/simple_setters.js"],"sourcesContent":["/**\r\n * Find a state instance, and execute a callback if found.\r\n *\r\n * @param  {Object|Function}    required    the config object, or mutation callback\r\n * @param  {Function}           optional    mutation callback\r\n * @return {Function}\r\n */\r\nconst findInstanceThen = function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is an object, we will use that as the\r\n    // config, and the second arg as the mutation handler\r\n    const { config, callback } = parseArguments(arguments);\r\n\r\n    return (state, payload) => {\r\n        if (stateAndPayloadAreValid(config, state, payload)) {\r\n\r\n            // find our instance based on the current configuration\r\n            const instance = state[config.stateKey].find(obj => {\r\n                return obj[config.instanceKey] === payload[config.instanceKey];\r\n            });\r\n\r\n            // if the instance was found, execute our mutation callback\r\n            if (instance) {\r\n                callback(instance, payload, state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this method allows us to easily apply configuration to the helper\r\nfindInstanceThen.config = opts => findInstanceThen.bind(null, opts);\r\n\r\n// helper to get config and callback from the arguments\r\nfunction parseArguments(args) {\r\n    let defaultConfig = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    if (typeof args[0] === 'function') {\r\n        return {\r\n            callback: args[0],\r\n            config: defaultConfig,\r\n        }\r\n    } else {\r\n        return {\r\n            callback: args[1],\r\n            config: Object.assign({}, defaultConfig, args[0]),\r\n        };\r\n    }\r\n}\r\n\r\n// check if the state or payload is malformed\r\nfunction stateAndPayloadAreValid(config, state, payload) {\r\n\r\n    // ensure that the instances array exists\r\n    if (! Array.isArray(state[config.stateKey])) {\r\n        console.error(`State does not contain an \"${ config.stateKey }\" array.`);\r\n        return false;\r\n    }\r\n\r\n    // ensure that the payload contains an id\r\n    if (typeof payload !== 'object' || typeof payload[config.instanceKey] === 'undefined') {\r\n        console.error(`Mutation payloads must be an object with an \"${ config.instanceKey }\" property.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default findInstanceThen;\r\n","// Similar to Object.entries but without using polyfill\r\nexport default function (obj) {\r\n    return Object.keys(obj).map(key => [ key, obj[key] ]);\r\n}\r\n","// Function to compose other functions (right to left evaluation)\r\nexport default function () {\r\n    const fns = arguments;\r\n\r\n    return function () {\r\n        let result;\r\n        \r\n        for (let i = fns.length - 1; i > -1; i--) {\r\n            if (i === fns.length - 1) {\r\n                result = fns[i].apply(fns[i], arguments);\r\n            } else {\r\n                result = fns[i].call(this, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n}\r\n","// Convert KeyValuePair[] to Object\r\nexport default function (obj, keyValuePair) {\r\n    const [ key, value ] = keyValuePair;\r\n    obj[key] = value;\r\n\r\n    return obj;\r\n}\r\n","import { mapGetters } from 'vuex';\r\nimport getEntries from './utils/get_entries';\r\nimport compose from './utils/compose';\r\nimport toObject from './utils/key_value_to_object';\r\n\r\n// Create a wrapper function which invokes the original function\r\n// passing in `this.id`\r\nconst wrapGetterFn = ([ key, originalFn ]) => {\r\n    const newFn = function () {\r\n        const innerFn = originalFn.apply(this, arguments);\r\n\r\n        if (typeof innerFn !== 'function') {\r\n            /* istanbul ignore next */\r\n            throw `The getter ${key} does not return a function. Try using the 'mapGetter' helper instead`;\r\n        }\r\n        \r\n        return innerFn(this.id);\r\n    };\r\n\r\n    return [ key, newFn ];\r\n};\r\n\r\nfunction invokeGettersWithId (getters) {\r\n    return getEntries(getters)\r\n        .map(wrapGetterFn)\r\n        .reduce(toObject, {});\r\n}\r\n\r\nconst mapInstanceGetters = compose(invokeGettersWithId, mapGetters);\r\n\r\nexport default mapInstanceGetters;\r\n","export function parseMappingArguments(args) {\r\n    // namespace is optional\r\n    const namespace = typeof args[0] === 'string' ? args[0] : null;\r\n\r\n    // mappings are required\r\n    const mappings = namespace ? args[1] : args[0];\r\n\r\n    // by default, the vm identifier key will be 'id'\r\n    const vmIdentifierKey = (namespace ? args[2] : args[1]) || 'id';\r\n\r\n    // by default, the instance identifier will be 'id'\r\n    const stateKey = 'instances';\r\n\r\n    // by default, the state key will be 'instances'\r\n    const instanceIdentifierKey = 'id';\r\n\r\n    return {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n     };\r\n}\r\n","/**\r\n * Helper function for resolving nested object values.\r\n *\r\n * @param  {Object}         obj         source object\r\n * @param  {Array|String}   path        path to nested value\r\n * @param  {String|RegExp}  delimeter   characters / pattern to split path on\r\n * @return {mixed}\r\n */\r\nexport default function(obj, path, delimeter = '.') {\r\n    const pathArray = Array.isArray(path) ? path : path.split(delimeter);\r\n\r\n    return pathArray.reduce((p, item) => p && p[item], obj);\r\n}\r\n","import { parseMappingArguments } from './utils/parsers';\r\nimport resolveObjectPath from './utils/resolve_object_path';\r\n\r\nexport default function() {\r\n    // extract our namespace and mappings from the arguments\r\n    const {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n    } = parseMappingArguments(arguments);\r\n\r\n    // normalize our mappings\r\n    const normalizedMappings = normalizeMappings(mappings);\r\n\r\n    // create a getter for each mapped piece of state\r\n    const computedProperties = {};\r\n\r\n    Object.keys(normalizedMappings).forEach((key) => {\r\n        const computedKey = key.split('.').pop();\r\n\r\n        computedProperties[computedKey] = createGetter({\r\n            key,\r\n            namespace,\r\n            normalizedMappings,\r\n            vmIdentifierKey,\r\n            instanceIdentifierKey,\r\n            stateKey,\r\n        });\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// normalize the mappings into a consistent object format\r\nfunction normalizeMappings(mappings) {\r\n    if (Array.isArray(mappings)) {\r\n        return mappings.reduce((normalizedMappings, key) => {\r\n            normalizedMappings[key] = key;\r\n\r\n            return normalizedMappings;\r\n        }, {});\r\n    }\r\n\r\n    return mappings;\r\n}\r\n\r\n// create a getter for a particular piece of state\r\nfunction createGetter({ key, namespace, normalizedMappings, vmIdentifierKey, instanceIdentifierKey, stateKey }) {\r\n    return function() {\r\n        // find the state object\r\n        const state = namespace\r\n            ? resolveObjectPath(this.$store.state, namespace, '/')\r\n            : this.$store.state;\r\n\r\n        // find our container of instances\r\n        const instancesContainer = resolveObjectPath(state, stateKey, '.');\r\n\r\n        // find our instance within it\r\n        const instance = instancesContainer.find(obj => obj[instanceIdentifierKey] === this[vmIdentifierKey]);\r\n\r\n        // and if all goes well, resolve the piece of state we're looking for\r\n        if (instance) {\r\n            return typeof normalizedMappings[key] === 'function'\r\n                ? normalizedMappings[key](instance)\r\n                : resolveObjectPath(instance, normalizedMappings[key]);\r\n        }\r\n    }\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Map vuex state with two way computed properties\r\n *\r\n * @param  {string|Object}  required the module namespace, or state mappings\r\n * @param  {Object}         optional state mappings\r\n * @return {Object}\r\n */\r\nexport default function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is a string, we will use that as the\r\n    // namespace, and the next arg as the state mapping\r\n    const { namespace, mappings } = parseArguments(arguments);\r\n\r\n    // then get the key and mutation names from our mappings\r\n    const parsedMappings = parseMappings(mappings);\r\n\r\n    // and last, turn them into getters and setters\r\n    const computedProperties = {};\r\n\r\n    Object.keys(parsedMappings).forEach((key) => {\r\n        computedProperties[key] = {\r\n            get: createGetter(namespace, parsedMappings[key]),\r\n            set: createSetter(namespace, parsedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// determine the values of our namespace and mappings\r\nfunction parseArguments(args) {\r\n    const first = args[0];\r\n    const second = args[1];\r\n\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// determine our key and mutation values\r\nfunction parseMappings(obj) {\r\n    const mapping = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        const value = obj[key];\r\n        const vmKey = key.slice(key.lastIndexOf('.') + 1);\r\n\r\n        if (typeof value === 'string') {\r\n            mapping[vmKey] = { key, mutation: value };\r\n        } else {\r\n            mapping[vmKey] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return mapping;\r\n}\r\n\r\n// create a getter for computed properties\r\nfunction createGetter(namespace, mapping) {\r\n    if (namespace) {\r\n        return function () {\r\n            const state = resolveObjectPath(this.$store.state, namespace, '/');\r\n\r\n            return resolveObjectPath(state, mapping.key, '.');\r\n        };\r\n    }\r\n\r\n    return function () {\r\n        return resolveObjectPath(this.$store.state, mapping.key, '.');\r\n    };\r\n}\r\n\r\n// create a setter for computed properties\r\nfunction createSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (namespace) {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function (value) {\r\n        this.$store.commit(mutation, value)\r\n    };\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set an instance's state equal to a value.\r\n *\r\n * @param  {Object}\r\n * @param  {String}\r\n * @param  {String}\r\n * @return {Object}\r\n */\r\nexport default function(\r\n    setters,\r\n    stateKey = 'instances',\r\n    instanceKey = 'id'\r\n) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, payload) {\r\n                // find the instance that we're mutating\r\n                const instance = findInstance(state, stateKey, instanceKey, payload);\r\n\r\n                if (instance) {\r\n                    const value = findValue(payload, instanceKey);\r\n\r\n                    // if the setter name has a dot, then resolve the\r\n                    // state path before feeding our value into it.\r\n                    if (setters[name].indexOf('.') > -1) {\r\n                        const obj = setters[name].split('.');\r\n                        const key = obj.pop();\r\n\r\n                        resolveObjectPath(instance, obj)[key] = value;\r\n                    } else {\r\n                        // otherwise, just set the instance state to our value\r\n                        instance[setters[name]] = value;\r\n                    }\r\n                } else {\r\n                    // if the instance wasn't found, let the dev know with a warning\r\n                    console.warn (`An instance with an identifier of ${instanceKey} was not found.`);\r\n                }\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n\r\n// helper function to find the correct instance\r\nfunction findInstance(state, stateKey, instanceKey, payload) {\r\n    return state[stateKey].find(obj => obj[instanceKey] === payload[instanceKey]);\r\n}\r\n\r\n// helper function to find the payload value\r\nfunction findValue(payload, instanceKey) {\r\n    for (let key in payload) {\r\n        if (key !== instanceKey) {\r\n            return payload[key];\r\n        }\r\n    }\r\n\r\n    // if we don't have a value, throw an error because the payload is invalid.\r\n    /* istanbul ignore next */\r\n    throw new Error('Failed to mutate instance, no value found in payload.', payload);\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set a piece of state equal to a value.\r\n *\r\n * @param  {Object} setters     Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(setters) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, value) {\r\n\r\n                // if the setter name has a dot, then resolve the\r\n                // state path before feeding our value into it.\r\n                if (setters[name].indexOf('.') > -1) {\r\n                    const obj = setters[name].split('.');\r\n                    const key = obj.pop();\r\n\r\n                    resolveObjectPath(state, obj)[key] = value;\r\n                }\r\n\r\n                // otherwise, just set the state to our value\r\n                else state[setters[name]] = value;\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n"],"names":["findInstanceThen","parseArguments","arguments","config","callback","state","payload","stateAndPayloadAreValid","instance","stateKey","find","obj","instanceKey","bind","opts","args","defaultConfig","Object","assign","Array","isArray","error","keys","map","key","fns","result","i","length","apply","call","keyValuePair","value","wrapGetterFn","originalFn","newFn","innerFn","id","invokeGettersWithId","getters","getEntries","reduce","toObject","mapInstanceGetters","compose","mapGetters","parseMappingArguments","namespace","mappings","vmIdentifierKey","instanceIdentifierKey","path","delimeter","pathArray","split","p","item","normalizedMappings","normalizeMappings","computedProperties","forEach","computedKey","pop","createGetter","resolveObjectPath","$store","instancesContainer","parsedMappings","parseMappings","createSetter","first","second","mapping","vmKey","slice","lastIndexOf","mutation","commit","setters","mutations","name","findInstance","findValue","indexOf","warn","Error"],"mappings":"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"}