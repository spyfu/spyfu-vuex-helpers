{"version":3,"file":null,"sources":["../lib/helpers/find_instance_then.js","../lib/helpers/map_two_way_state.js","../lib/index.js"],"sourcesContent":["/**\r\n * Find a state instance, and execute a callback if found.\r\n *\r\n * @param  {Object|Function}    required    the config object, or mutation callback\r\n * @param  {Function}           optional    mutation callback\r\n * @return {Function}\r\n */\r\nconst findInstanceThen = function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is an object, we will use that as the\r\n    // config, and the second arg as the mutation handler\r\n    const { config, callback } = parseArguments(arguments);\r\n\r\n    return (state, payload) => {\r\n        if (stateAndPayloadAreValid(config, state, payload)) {\r\n\r\n            // find our instance based on the current configuration\r\n            const instance = state[config.stateKey].find(obj => {\r\n                return obj[config.instanceKey] === payload[config.instanceKey];\r\n            });\r\n\r\n            // if the instance was found, execute our mutation callback\r\n            if (instance) {\r\n                callback(instance, payload, state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this method allows us to easily apply configuration to the helper\r\nfindInstanceThen.config = opts => findInstanceThen.bind(null, opts);\r\n\r\n// helper to get config and callback from the arguments\r\nfunction parseArguments(args) {\r\n    let defaultConfig = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    if (typeof args[0] === 'function') {\r\n        return {\r\n            callback: args[0],\r\n            config: defaultConfig,\r\n        }\r\n    } else {\r\n        return {\r\n            callback: args[1],\r\n            config: Object.assign({}, defaultConfig, args[0]),\r\n        };\r\n    }\r\n}\r\n\r\n// check if the state or payload is malformed\r\nfunction stateAndPayloadAreValid(config, state, payload) {\r\n\r\n    // ensure that the instances array exists\r\n    if (! Array.isArray(state[config.stateKey])) {\r\n        console.error(`State does not contain an \"${ config.stateKey }\" array.`);\r\n        return false;\r\n    }\r\n\r\n    // ensure that the payload contains an id\r\n    if (typeof payload !== 'object' || typeof payload[config.instanceKey] === 'undefined') {\r\n        console.error(`Mutation payloads must be an object with an \"${ config.instanceKey }\" property.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default findInstanceThen;\r\n","/**\r\n * Map vuex state with two way computed properties\r\n *\r\n * @param  {string|Object}  required the module namespace, or state mappings\r\n * @param  {Object}         optional state mappings\r\n * @return {Object}\r\n */\r\nexport default function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is a string, we will use that as the\r\n    // namespace, and the next arg as the state mapping\r\n    const { namespace, mappings } = parseArguments(arguments);\r\n\r\n    // then get the key and mutation names from our mappings\r\n    const parsedMappings = parseMappings(mappings);\r\n\r\n    // and last, turn them into getters and setters\r\n    const computedProperties = {};\r\n\r\n    Object.keys(parsedMappings).forEach((key) => {\r\n        computedProperties[key] = {\r\n            get: createGetter(namespace, parsedMappings[key]),\r\n            set: createSetter(namespace, parsedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// determine the values of our namespace and mappings\r\nfunction parseArguments(args) {\r\n    const first = args[0];\r\n    const second = args[1];\r\n\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// determine our key and mutation values\r\nfunction parseMappings(obj) {\r\n    const mapping = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        const value = obj[key];\r\n        const vmKey = key.slice(key.lastIndexOf('.') + 1);\r\n\r\n        if (typeof value === 'string') {\r\n            mapping[vmKey] = { key, mutation: value };\r\n        } else {\r\n            mapping[vmKey] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return mapping;\r\n}\r\n\r\n// resolve an object path from a string\r\nfunction resolveObject(obj, path, delimeter) {\r\n    return path.split(delimeter).reduce((p, item) => p && p[item], obj);\r\n}\r\n\r\n// create a getter for computed properties\r\nfunction createGetter(namespace, mapping) {\r\n    if (namespace) {\r\n        return function () {\r\n            const state = resolveObject(this.$store.state, namespace, '/');\r\n\r\n            return resolveObject(state, mapping.key, '.');\r\n        };\r\n    }\r\n\r\n    return function () {\r\n        return resolveObject(this.$store.state, mapping.key, '.');\r\n    };\r\n}\r\n\r\n// create a setter for computed properties\r\nfunction createSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (namespace) {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function (value) {\r\n        this.$store.commit(mutation, value)\r\n    };\r\n}\r\n","import findInstanceThen from './helpers/find_instance_then';\r\nimport mapTwoWayState from './helpers/map_two_way_state';\r\n\r\nmodule.exports = {\r\n    findInstanceThen,\r\n    mapTwoWayState,\r\n}\r\n"],"names":["findInstanceThen","parseArguments","arguments","config","callback","state","payload","stateAndPayloadAreValid","instance","stateKey","find","obj","instanceKey","bind","opts","args","defaultConfig","Object","assign","Array","isArray","error","namespace","mappings","parsedMappings","parseMappings","computedProperties","keys","forEach","key","createGetter","createSetter","first","second","mapping","value","vmKey","slice","lastIndexOf","mutation","resolveObject","path","delimeter","split","reduce","p","item","$store","commit","module","exports"],"mappings":"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"}