{"version":3,"file":null,"sources":["../lib/helpers/find_instance_then.js","../lib/helpers/utils/get_entries.js","../lib/helpers/utils/compose.js","../lib/helpers/utils/key_value_to_object.js","../lib/helpers/map_instance_getters.js","../lib/helpers/utils/resolve_object_path.js","../lib/helpers/map_two_way_state.js","../lib/helpers/simple_instance_setters.js","../lib/helpers/simple_setters.js","../lib/index.js"],"sourcesContent":["/**\r\n * Find a state instance, and execute a callback if found.\r\n *\r\n * @param  {Object|Function}    required    the config object, or mutation callback\r\n * @param  {Function}           optional    mutation callback\r\n * @return {Function}\r\n */\r\nconst findInstanceThen = function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is an object, we will use that as the\r\n    // config, and the second arg as the mutation handler\r\n    const { config, callback } = parseArguments(arguments);\r\n\r\n    return (state, payload) => {\r\n        if (stateAndPayloadAreValid(config, state, payload)) {\r\n\r\n            // find our instance based on the current configuration\r\n            const instance = state[config.stateKey].find(obj => {\r\n                return obj[config.instanceKey] === payload[config.instanceKey];\r\n            });\r\n\r\n            // if the instance was found, execute our mutation callback\r\n            if (instance) {\r\n                callback(instance, payload, state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this method allows us to easily apply configuration to the helper\r\nfindInstanceThen.config = opts => findInstanceThen.bind(null, opts);\r\n\r\n// helper to get config and callback from the arguments\r\nfunction parseArguments(args) {\r\n    let defaultConfig = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    if (typeof args[0] === 'function') {\r\n        return {\r\n            callback: args[0],\r\n            config: defaultConfig,\r\n        }\r\n    } else {\r\n        return {\r\n            callback: args[1],\r\n            config: Object.assign({}, defaultConfig, args[0]),\r\n        };\r\n    }\r\n}\r\n\r\n// check if the state or payload is malformed\r\nfunction stateAndPayloadAreValid(config, state, payload) {\r\n\r\n    // ensure that the instances array exists\r\n    if (! Array.isArray(state[config.stateKey])) {\r\n        console.error(`State does not contain an \"${ config.stateKey }\" array.`);\r\n        return false;\r\n    }\r\n\r\n    // ensure that the payload contains an id\r\n    if (typeof payload !== 'object' || typeof payload[config.instanceKey] === 'undefined') {\r\n        console.error(`Mutation payloads must be an object with an \"${ config.instanceKey }\" property.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default findInstanceThen;\r\n","// Similar to Object.entries but without using polyfill\r\nexport default function (obj) {\r\n    return Object.keys(obj).map(key => [ key, obj[key] ]);\r\n}\r\n","// Function to compose other functions (right to left evaluation)\r\nexport default function () {\r\n    const fns = arguments;\r\n\r\n    return function () {\r\n        let result;\r\n        \r\n        for (let i = fns.length - 1; i > -1; i--) {\r\n            if (i === fns.length - 1) {\r\n                result = fns[i].apply(fns[i], arguments);\r\n            } else {\r\n                result = fns[i].call(this, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n}\r\n","// Convert KeyValuePair[] to Object\r\nexport default function (obj, keyValuePair) {\r\n    const [ key, value ] = keyValuePair;\r\n    obj[key] = value;\r\n\r\n    return obj;\r\n}\r\n","import { mapGetters } from 'vuex';\r\nimport getEntries from './utils/get_entries';\r\nimport compose from './utils/compose';\r\nimport toObject from './utils/key_value_to_object';\r\n\r\n// Create a wrapper function which invokes the original function\r\n// passing in `this.id`\r\nconst wrapGetterFn = ([ key, originalFn ]) => {\r\n    const newFn = function () {\r\n        const innerFn = originalFn.apply(this, arguments);\r\n\r\n        if (typeof innerFn !== 'function') {\r\n            /* istanbul ignore next */\r\n            throw `The getter ${key} does not return a function. Try using the 'mapGetter' helper instead`;\r\n        }\r\n        \r\n        return innerFn(this.id);\r\n    };\r\n\r\n    return [ key, newFn ];\r\n};\r\n\r\nfunction invokeGettersWithId (getters) {\r\n    return getEntries(getters)\r\n        .map(wrapGetterFn)\r\n        .reduce(toObject, {});\r\n}\r\n\r\nconst mapInstanceGetters = compose(invokeGettersWithId, mapGetters);\r\n\r\nexport default mapInstanceGetters;\r\n","/**\r\n * Helper function for resolving nested object values.\r\n *\r\n * @param  {Object}         obj         source object\r\n * @param  {Array|String}   path        path to nested value\r\n * @param  {String|RegExp}  delimeter   characters / pattern to split path on\r\n * @return {mixed}\r\n */\r\nexport default function(obj, path, delimeter = '.') {\r\n    const pathArray = Array.isArray(path) ? path : path.split(delimeter);\r\n\r\n    return pathArray.reduce((p, item) => p && p[item], obj);\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Map vuex state with two way computed properties\r\n *\r\n * @param  {string|Object}  required the module namespace, or state mappings\r\n * @param  {Object}         optional state mappings\r\n * @return {Object}\r\n */\r\nexport default function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is a string, we will use that as the\r\n    // namespace, and the next arg as the state mapping\r\n    const { namespace, mappings } = parseArguments(arguments);\r\n\r\n    // then get the key and mutation names from our mappings\r\n    const parsedMappings = parseMappings(mappings);\r\n\r\n    // and last, turn them into getters and setters\r\n    const computedProperties = {};\r\n\r\n    Object.keys(parsedMappings).forEach((key) => {\r\n        computedProperties[key] = {\r\n            get: createGetter(namespace, parsedMappings[key]),\r\n            set: createSetter(namespace, parsedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// determine the values of our namespace and mappings\r\nfunction parseArguments(args) {\r\n    const first = args[0];\r\n    const second = args[1];\r\n\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// determine our key and mutation values\r\nfunction parseMappings(obj) {\r\n    const mapping = {};\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        const value = obj[key];\r\n        const vmKey = key.slice(key.lastIndexOf('.') + 1);\r\n\r\n        if (typeof value === 'string') {\r\n            mapping[vmKey] = { key, mutation: value };\r\n        } else {\r\n            mapping[vmKey] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return mapping;\r\n}\r\n\r\n// create a getter for computed properties\r\nfunction createGetter(namespace, mapping) {\r\n    if (namespace) {\r\n        return function () {\r\n            const state = resolveObjectPath(this.$store.state, namespace, '/');\r\n\r\n            return resolveObjectPath(state, mapping.key, '.');\r\n        };\r\n    }\r\n\r\n    return function () {\r\n        return resolveObjectPath(this.$store.state, mapping.key, '.');\r\n    };\r\n}\r\n\r\n// create a setter for computed properties\r\nfunction createSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (namespace) {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function (value) {\r\n        this.$store.commit(mutation, value)\r\n    };\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set an instance's state equal to a value.\r\n *\r\n * @param  {Object}\r\n * @param  {String}\r\n * @param  {String}\r\n * @return {Object}\r\n */\r\nexport default function(\r\n    setters,\r\n    stateKey = 'instances',\r\n    instanceKey = 'id'\r\n) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, payload) {\r\n                // find the instance that we're mutating\r\n                const instance = findInstance(state, stateKey, instanceKey, payload);\r\n\r\n                if (instance) {\r\n                    const value = findValue(payload, instanceKey);\r\n\r\n                    // if the setter name has a dot, then resolve the\r\n                    // state path before feeding our value into it.\r\n                    if (setters[name].indexOf('.') > -1) {\r\n                        const obj = setters[name].split('.');\r\n                        const key = obj.pop();\r\n\r\n                        resolveObjectPath(instance, obj)[key] = value;\r\n                    } else {\r\n                        // otherwise, just set the instance state to our value\r\n                        instance[setters[name]] = value;\r\n                    }\r\n                } else {\r\n                    // if the instance wasn't found, let the dev know with a warning\r\n                    console.warn (`An instance with an identifier of ${instanceKey} was not found.`);\r\n                }\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n\r\n// helper function to find the correct instance\r\nfunction findInstance(state, stateKey, instanceKey, payload) {\r\n    return state[stateKey].find(obj => obj[instanceKey] === payload[instanceKey]);\r\n}\r\n\r\n// helper function to find the payload value\r\nfunction findValue(payload, instanceKey) {\r\n    for (let key in payload) {\r\n        if (key !== instanceKey) {\r\n            return payload[key];\r\n        }\r\n    }\r\n\r\n    // if we don't have a value, throw an error because the payload is invalid.\r\n    throw new Error('Failed to mutate instance, no value found in payload.', payload);\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set a piece of state equal to a value.\r\n *\r\n * @param  {Object} setters     Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(setters) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, value) {\r\n\r\n                // if the setter name has a dot, then resolve the\r\n                // state path before feeding our value into it.\r\n                if (setters[name].indexOf('.') > -1) {\r\n                    const obj = setters[name].split('.');\r\n                    const key = obj.pop();\r\n\r\n                    resolveObjectPath(state, obj)[key] = value;\r\n                }\r\n\r\n                // otherwise, just set the state to our value\r\n                else state[setters[name]] = value;\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n","import findInstanceThen from './helpers/find_instance_then';\r\nimport mapInstanceGetters from './helpers/map_instance_getters';\r\nimport mapTwoWayState from './helpers/map_two_way_state';\r\nimport resolveObjectPath from './helpers/utils/resolve_object_path';\r\nimport simpleInstanceSetters from './helpers/simple_instance_setters';\r\nimport simpleSetters from './helpers/simple_setters';\r\n\r\nmodule.exports = {\r\n    findInstanceThen,\r\n    mapInstanceGetters,\r\n    mapTwoWayState,\r\n    resolveObjectPath,\r\n    simpleInstanceSetters,\r\n    simpleSetters,\r\n};\r\n"],"names":["findInstanceThen","parseArguments","arguments","config","callback","state","payload","stateAndPayloadAreValid","instance","stateKey","find","obj","instanceKey","bind","opts","args","defaultConfig","Object","assign","Array","isArray","error","keys","map","key","fns","result","i","length","apply","call","keyValuePair","value","wrapGetterFn","originalFn","newFn","innerFn","id","invokeGettersWithId","getters","getEntries","reduce","toObject","mapInstanceGetters","compose","mapGetters","path","delimeter","pathArray","split","p","item","namespace","mappings","parsedMappings","parseMappings","computedProperties","forEach","createGetter","createSetter","first","second","mapping","vmKey","slice","lastIndexOf","mutation","resolveObjectPath","$store","commit","setters","mutations","name","findInstance","findValue","indexOf","pop","warn","Error","module","exports"],"mappings":"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"}