{"version":3,"file":"spyfu-vuex-helpers.esm.js","sources":["../lib/helpers/assign_state.js","../lib/helpers/find_instance_then.js","../lib/helpers/instance_getters.js","../lib/helpers/instance_mutations.js","../lib/helpers/utils/get_entries.js","../lib/helpers/utils/compose.js","../lib/helpers/utils/key_value_to_object.js","../lib/helpers/map_instance_getters.js","../lib/helpers/utils/parsers.js","../lib/helpers/utils/resolve_object_path.js","../lib/helpers/map_instance_state.js","../lib/helpers/utils/error.js","../lib/helpers/map_two_way_state.js","../lib/helpers/simple_instance_setters.js","../lib/helpers/simple_pushers.js","../lib/helpers/simple_removers.js","../lib/helpers/simple_setters.js"],"sourcesContent":["/**\n * Mutation to set the entire state of a module.\n * \n * @param  {Function}   stateFactory    a function that returns a fresh state object\n * @return {Function}\n */\nexport default function (stateFactory) {\n    return function (state) {\n        Object.assign(state, stateFactory());\n    }\n}","/**\r\n * Find a state instance, and execute a callback if found.\r\n *\r\n * @param  {Object|Function}    required    the config object, or mutation callback\r\n * @param  {Function}           optional    mutation callback\r\n * @return {Function}\r\n */\r\nconst findInstanceThen = function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is an object, we will use that as the\r\n    // config, and the second arg as the mutation handler\r\n    const { config, callback } = parseArguments(arguments);\r\n\r\n    return (state, payload) => {\r\n        if (stateAndPayloadAreValid(config, state, payload)) {\r\n\r\n            // find our instance based on the current configuration\r\n            const instance = state[config.stateKey].find(obj => {\r\n                return obj[config.instanceKey] === payload[config.instanceKey];\r\n            });\r\n\r\n            // if the instance was found, execute our mutation callback\r\n            if (instance) {\r\n                callback(instance, payload, state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// this method allows us to easily apply configuration to the helper\r\nfindInstanceThen.config = opts => findInstanceThen.bind(null, opts);\r\n\r\n// helper to get config and callback from the arguments\r\nfunction parseArguments(args) {\r\n    let defaultConfig = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    if (typeof args[0] === 'function') {\r\n        return {\r\n            callback: args[0],\r\n            config: defaultConfig,\r\n        }\r\n    } else {\r\n        return {\r\n            callback: args[1],\r\n            config: Object.assign({}, defaultConfig, args[0]),\r\n        };\r\n    }\r\n}\r\n\r\n// check if the state or payload is malformed\r\nfunction stateAndPayloadAreValid(config, state, payload) {\r\n\r\n    // ensure that the instances array exists\r\n    if (! Array.isArray(state[config.stateKey])) {\r\n        console.error(`State does not contain an \"${ config.stateKey }\" array.`);\r\n        return false;\r\n    }\r\n\r\n    // ensure that the payload contains an id\r\n    if (typeof payload !== 'object' || typeof payload[config.instanceKey] === 'undefined') {\r\n        console.error(`Mutation payloads must be an object with an \"${ config.instanceKey }\" property.`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default findInstanceThen;\r\n","\r\n/**\r\n * Instance getters.\r\n *\r\n * @return {Object}\r\n */\r\nexport default function() {\r\n    const { getters, options } = parseArguments(arguments);\r\n\r\n    return Object.keys(getters).reduce((instanceGetters, name) => {\r\n        instanceGetters[name] = (state, otherGetters) => instanceKey => {\r\n            const instance = state[options.stateKey || 'instances'].find(obj => {\r\n                return obj[options.instanceKey || 'id'] === instanceKey;\r\n            });\r\n\r\n            if (instance) {\r\n                return getters[name](instance, otherGetters, state, instanceKey);\r\n            }\r\n        };\r\n\r\n        return instanceGetters;\r\n    }, {});\r\n}\r\n\r\n// parse arguments\r\nfunction parseArguments(args) {\r\n    const hasOptionsArg = args.length > 1;\r\n\r\n    return {\r\n        options: hasOptionsArg ? args[0] : {},\r\n        getters: hasOptionsArg ? args[1] : args[0],\r\n    };\r\n}\r\n","import findInstanceThen from './find_instance_then';\r\n\r\n/**\r\n * Instance mutations.\r\n *\r\n * @return {Object}\r\n */\r\nexport default function() {\r\n    const { options, mutations } = parseArguments(arguments);\r\n\r\n    return Object.keys(mutations).reduce((instanceMutations, name) => {\r\n        instanceMutations[name] = findInstanceThen(options, mutations[name]);\r\n\r\n        return instanceMutations;\r\n    }, {});\r\n}\r\n\r\n// parse arguments\r\nfunction parseArguments(args) {\r\n    const hasOptionsArg = args.length > 1;\r\n\r\n    const defaultOptions = {\r\n        stateKey: 'instances',\r\n        instanceKey: 'id',\r\n    };\r\n\r\n    return {\r\n        options: hasOptionsArg ? args[0] : defaultOptions,\r\n        mutations: hasOptionsArg ? args[1] : args[0],\r\n    };\r\n}\r\n","// Similar to Object.entries but without using polyfill\r\nexport default function (obj) {\r\n    return Object.keys(obj).map(key => [ key, obj[key] ]);\r\n}\r\n","// Function to compose other functions (right to left evaluation)\r\nexport default function () {\r\n    const fns = arguments;\r\n\r\n    return function () {\r\n        let result;\r\n        \r\n        for (let i = fns.length - 1; i > -1; i--) {\r\n            if (i === fns.length - 1) {\r\n                result = fns[i].apply(fns[i], arguments);\r\n            } else {\r\n                result = fns[i].call(this, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n}\r\n","// Convert KeyValuePair[] to Object\r\nexport default function (obj, keyValuePair) {\r\n    const [ key, value ] = keyValuePair;\r\n    obj[key] = value;\r\n\r\n    return obj;\r\n}\r\n","import { mapGetters } from 'vuex';\r\nimport getEntries from './utils/get_entries';\r\nimport compose from './utils/compose';\r\nimport toObject from './utils/key_value_to_object';\r\n\r\n// Create a wrapper function which invokes the original function\r\n// passing in `this.id`\r\nconst wrapGetterFn = ([ key, originalFn ]) => {\r\n    const newFn = function () {\r\n        const innerFn = originalFn.apply(this, arguments);\r\n\r\n        if (typeof innerFn !== 'function') {\r\n            /* istanbul ignore next */\r\n            throw `The getter ${key} does not return a function. Try using the 'mapGetter' helper instead`;\r\n        }\r\n        \r\n        return innerFn(this.id);\r\n    };\r\n\r\n    return [ key, newFn ];\r\n};\r\n\r\nfunction invokeGettersWithId (getters) {\r\n    return getEntries(getters)\r\n        .map(wrapGetterFn)\r\n        .reduce(toObject, {});\r\n}\r\n\r\nconst mapInstanceGetters = compose(invokeGettersWithId, mapGetters);\r\n\r\nexport default mapInstanceGetters;\r\n","export function parseMappingArguments(args) {\r\n    // namespace is optional\r\n    const namespace = typeof args[0] === 'string' ? args[0] : null;\r\n\r\n    // mappings are required\r\n    const mappings = namespace ? args[1] : args[0];\r\n\r\n    // by default, the vm identifier key will be 'id'\r\n    const vmIdentifierKey = (namespace ? args[2] : args[1]) || 'id';\r\n\r\n    // by default, the instance identifier will be 'id'\r\n    const stateKey = 'instances';\r\n\r\n    // by default, the state key will be 'instances'\r\n    const instanceIdentifierKey = 'id';\r\n\r\n    return {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n     };\r\n}\r\n","/**\r\n * Helper function for resolving nested object values.\r\n *\r\n * @param  {Object}         obj         source object\r\n * @param  {Array|String}   path        path to nested value\r\n * @param  {String|RegExp}  delimeter   characters / pattern to split path on\r\n * @return {mixed}\r\n */\r\nexport default function(obj, path, delimeter = '.') {\r\n    const pathArray = Array.isArray(path) ? path : path.split(delimeter);\r\n\r\n    return pathArray.reduce((p, item) => p && p[item], obj);\r\n}\r\n","import { parseMappingArguments } from './utils/parsers';\r\nimport resolveObjectPath from './utils/resolve_object_path';\r\n\r\nexport default function() {\r\n    // extract our namespace and mappings from the arguments\r\n    const {\r\n        namespace,\r\n        mappings,\r\n        vmIdentifierKey,\r\n        instanceIdentifierKey,\r\n        stateKey,\r\n    } = parseMappingArguments(arguments);\r\n\r\n    // normalize our mappings\r\n    const normalizedMappings = normalizeMappings(mappings);\r\n\r\n    // create a getter for each mapped piece of state\r\n    const computedProperties = {};\r\n\r\n    Object.keys(normalizedMappings).forEach((key) => {\r\n        const computedKey = key.split('.').pop();\r\n\r\n        computedProperties[computedKey] = createGetter({\r\n            key,\r\n            namespace,\r\n            normalizedMappings,\r\n            vmIdentifierKey,\r\n            instanceIdentifierKey,\r\n            stateKey,\r\n        });\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// normalize the mappings into a consistent object format\r\nfunction normalizeMappings(mappings) {\r\n    if (Array.isArray(mappings)) {\r\n        return mappings.reduce((normalizedMappings, key) => {\r\n            normalizedMappings[key] = key;\r\n\r\n            return normalizedMappings;\r\n        }, {});\r\n    }\r\n\r\n    return mappings;\r\n}\r\n\r\n// create a getter for a particular piece of state\r\nfunction createGetter({ key, namespace, normalizedMappings, vmIdentifierKey, instanceIdentifierKey, stateKey }) {\r\n    return function() {\r\n        // find the state object\r\n        const state = namespace\r\n            ? resolveObjectPath(this.$store.state, namespace, '/')\r\n            : this.$store.state;\r\n\r\n        // find our container of instances\r\n        const instancesContainer = resolveObjectPath(state, stateKey, '.');\r\n\r\n        // find our instance within it\r\n        const instance = instancesContainer.find(obj => obj[instanceIdentifierKey] === this[vmIdentifierKey]);\r\n\r\n        // and if all goes well, resolve the piece of state we're looking for\r\n        if (instance) {\r\n            return typeof normalizedMappings[key] === 'function'\r\n                ? normalizedMappings[key](instance)\r\n                : resolveObjectPath(instance, normalizedMappings[key]);\r\n        }\r\n    }\r\n}\r\n","// helper to throw consistent errors\r\n// this is useful in testing to make sure caught errors are ours\r\nexport default function(message, ...args) {\r\n    throw new Error('[spyfu-vuex-helpers]: ' + message, ...args);\r\n}","import resolveObjectPath from './utils/resolve_object_path';\r\nimport error from './utils/error';\r\n\r\n/**\r\n * Map vuex state with two way computed properties\r\n *\r\n * @param  {string|Object}  required the module namespace, or state mappings\r\n * @param  {Object}         optional state mappings\r\n * @return {Object}\r\n */\r\nexport default function () {\r\n    // this function supports two argument signatures. if the\r\n    // first argument is a string, we will use that as the\r\n    // namespace, and the next arg as the state mapping\r\n    const { namespace, mappings } = parseArguments(arguments);\r\n\r\n    // then get the key and mutation names from our mappings\r\n    const parsedMappings = parseMappings(mappings);\r\n\r\n    // and last, turn them into getters and setters\r\n    const computedProperties = {};\r\n\r\n    Object.keys(parsedMappings).forEach((key) => {\r\n        computedProperties[key] = {\r\n            get: createGetter(namespace, parsedMappings[key]),\r\n            set: createSetter(namespace, parsedMappings[key]),\r\n        };\r\n    });\r\n\r\n    return computedProperties;\r\n}\r\n\r\n// determine the values of our namespace and mappings\r\nfunction parseArguments(args) {\r\n    const first = args[0];\r\n    const second = args[1];\r\n\r\n    return typeof first === 'string'\r\n        ? { namespace: first, mappings: second }\r\n        : { namespace: null, mappings: first };\r\n}\r\n\r\n// determine our key and mutation values\r\nfunction parseMappings(obj) {\r\n    const mapping = {};\r\n\r\n    // throw a helpful error when mapTwoWayState is mixed up with mapState\r\n    if (Array.isArray(obj)) {\r\n        error('Invalid arguments for mapTwoWayState. State mapping must be an object in { \\'path.to.state\\': \\'mutationName\\' } format.');\r\n    }\r\n\r\n    Object.keys(obj).forEach((key) => {\r\n        const value = obj[key];\r\n        const vmKey = key.slice(key.lastIndexOf('.') + 1);\r\n\r\n        if (typeof value === 'string') {\r\n            mapping[vmKey] = { key, mutation: value };\r\n        } else {\r\n            mapping[vmKey] = { key: value.key, mutation: value.mutation };\r\n        }\r\n    });\r\n\r\n    return mapping;\r\n}\r\n\r\n// create a getter for computed properties\r\nfunction createGetter(namespace, mapping) {\r\n    if (namespace) {\r\n        return function () {\r\n            const state = resolveObjectPath(this.$store.state, namespace, '/');\r\n\r\n            return resolveObjectPath(state, mapping.key, '.');\r\n        };\r\n    }\r\n\r\n    return function () {\r\n        return resolveObjectPath(this.$store.state, mapping.key, '.');\r\n    };\r\n}\r\n\r\n// create a setter for computed properties\r\nfunction createSetter(namespace, mappings) {\r\n    let mutation = mappings.mutation;\r\n\r\n    if (namespace) {\r\n        mutation = namespace + '/' + mutation;\r\n    }\r\n\r\n    return function (value) {\r\n        this.$store.commit(mutation, value)\r\n    };\r\n}\r\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set an instance's state equal to a value.\r\n *\r\n * @param  {Object}\r\n * @param  {String}\r\n * @param  {String}\r\n * @return {Object}\r\n */\r\nexport default function(\r\n    setters,\r\n    stateKey = 'instances',\r\n    instanceKey = 'id'\r\n) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, payload) {\r\n                // find the instance that we're mutating\r\n                const instance = findInstance(state, stateKey, instanceKey, payload);\r\n\r\n                if (instance) {\r\n                    const value = findValue(payload, instanceKey);\r\n\r\n                    // if the setter name has a dot, then resolve the\r\n                    // state path before feeding our value into it.\r\n                    if (setters[name].indexOf('.') > -1) {\r\n                        const obj = setters[name].split('.');\r\n                        const key = obj.pop();\r\n\r\n                        resolveObjectPath(instance, obj)[key] = value;\r\n                    } else {\r\n                        // otherwise, just set the instance state to our value\r\n                        instance[setters[name]] = value;\r\n                    }\r\n                } else {\r\n                    // if the instance wasn't found, let the dev know with a warning\r\n                    console.warn (`An instance with an identifier of ${instanceKey} was not found.`);\r\n                }\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n\r\n// helper function to find the correct instance\r\nfunction findInstance(state, stateKey, instanceKey, payload) {\r\n    return state[stateKey].find(obj => obj[instanceKey] === payload[instanceKey]);\r\n}\r\n\r\n// helper function to find the payload value\r\nfunction findValue(payload, instanceKey) {\r\n    for (let key in payload) {\r\n        if (key !== instanceKey) {\r\n            return payload[key];\r\n        }\r\n    }\r\n\r\n    // if we don't have a value, throw an error because the payload is invalid.\r\n    /* istanbul ignore next */\r\n    throw new Error('Failed to mutate instance, no value found in payload.', payload);\r\n}\r\n","import error from './utils/error';\r\nimport resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations pushes values onto an array.\r\n *\r\n * @param  {Object} pushers Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(pushers) {\r\n    return Object.keys(pushers).reduce((mutations, name) => {\r\n        return {\r\n            ...mutations,\r\n            [name](state, value) {\r\n                const mutationName = pushers[name];\r\n\r\n                // if the pusher name has a dot, then resolve the\r\n                // array path before pushing our value onto it\r\n                if (mutationName.indexOf('.') > -1) {\r\n                    const obj = mutationName.split('.');\r\n                    const key = obj.pop();\r\n                    const parentObj = resolveObjectPath(state, obj);\r\n\r\n                    // dev errors\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // target path must resolve to an array\r\n                        if (!parentObj || typeof parentObj[key] === 'undefined') {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is undefined.`);\r\n                        } else if (!Array.isArray(parentObj[key])) {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is not an array, ${typeof parentObj[key]} found.`);\r\n                        }\r\n                    }\r\n                    \r\n                    parentObj[key].push(value);\r\n                }\r\n\r\n                // otherwise, just push our value onto the array\r\n                else {\r\n\r\n                    // dev errors\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        // target must be an array\r\n                        if (typeof state[mutationName] === 'undefined') {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is undefined.`);\r\n                        } else if (!Array.isArray(state[mutationName])) {\r\n                            error(`simplePusher mutation failed, target \"${mutationName}\" is not an array, ${typeof state[mutationName]} found.`);\r\n                        }\r\n                    }\r\n\r\n                    state[mutationName].push(value);\r\n                }\r\n            },\r\n        }\r\n    }, {});\r\n}","/* eslint-disable */\nimport error from './utils/error';\nimport resolveObjectPath from './utils/resolve_object_path';\n\n/**\n * Simple mutations that removes a value from an array.\n *\n * @param  {Object} removers     Object mapping mutations to state\n * @return {Object}\n */\nexport default function(removers) {\n    // loop over the setter keys and make a mutation for each\n    return Object.keys(removers).reduce((mutations, name) => {\n\n        // attach our new mutation to result\n        return Object.assign({}, mutations, {\n            [name](state, removeVal) {\n                const mutationName = removers[name];\n\n                // if the target has a dot, remove our value from the nested array\n                if (mutationName.indexOf('.') > -1) {\n                    const obj = removers[name].split('.');\n                    const key = obj.pop();\n                    const parentObj = resolveObjectPath(state, obj);\n\n                    // dev errors\n                    if (process.env.NODE_ENV !== 'production') {\n                        // target path must resolve to an array\n                        if (!parentObj || typeof parentObj[key] === 'undefined') {\n                            error(`simpleRemover mutation failed, target \"${mutationName}\" is undefined.`);\n                        } else if (!Array.isArray(parentObj[key])) {\n                            error(`simpleRemover mutation failed, target \"${mutationName}\" is not an array, ${typeof parentObj[key]} found.`);\n                        }\n                    }\n                    \n                    parentObj[key] = parentObj[key].filter(val => val !== removeVal);\n                }\n\n                // otherwise, just remove our value from the array\n                else {\n                    // dev errors\n                    if (process.env.NODE_ENV !== 'production') {\n                        // target must be an array\n                        if (typeof state[mutationName] === 'undefined') {\n                            error(`simpleRemover mutation failed, target \"${mutationName}\" is undefined.`);\n                        } else if (!Array.isArray(state[mutationName])) {\n                            error(`simpleRemover mutation failed, target \"${mutationName}\" is not an array, ${typeof state[mutationName]} found.`);\n                        }\n                    }\n\n                    state[removers[name]] = state[removers[name]].filter(val => val !== removeVal);\n                }\n            },\n        });\n    }, {});\n}\n","import resolveObjectPath from './utils/resolve_object_path';\r\n\r\n/**\r\n * Simple mutations that set a piece of state equal to a value.\r\n *\r\n * @param  {Object} setters     Object mapping mutations to state\r\n * @return {Object}\r\n */\r\nexport default function(setters) {\r\n    // loop over the setter keys and make a mutation for each\r\n    return Object.keys(setters).reduce((mutations, name) => {\r\n\r\n        // attach our new mutation to result\r\n        return Object.assign({}, mutations, {\r\n            [name](state, value) {\r\n\r\n                // if the setter name has a dot, then resolve the\r\n                // state path before feeding our value into it.\r\n                if (setters[name].indexOf('.') > -1) {\r\n                    const obj = setters[name].split('.');\r\n                    const key = obj.pop();\r\n\r\n                    resolveObjectPath(state, obj)[key] = value;\r\n                }\r\n\r\n                // otherwise, just set the state to our value\r\n                else state[setters[name]] = value;\r\n            },\r\n        });\r\n    }, {});\r\n}\r\n"],"names":["stateFactory","state","assign","findInstanceThen","parseArguments","arguments","config","callback","payload","stateAndPayloadAreValid","instance","stateKey","find","obj","instanceKey","bind","opts","args","defaultConfig","Object","Array","isArray","error","getters","options","keys","reduce","instanceGetters","name","otherGetters","hasOptionsArg","length","mutations","instanceMutations","defaultOptions","map","key","fns","result","i","apply","call","keyValuePair","value","wrapGetterFn","originalFn","newFn","innerFn","id","invokeGettersWithId","getEntries","toObject","mapInstanceGetters","compose","mapGetters","parseMappingArguments","namespace","mappings","vmIdentifierKey","instanceIdentifierKey","path","delimeter","pathArray","split","p","item","normalizedMappings","normalizeMappings","computedProperties","forEach","computedKey","pop","createGetter","resolveObjectPath","$store","instancesContainer","message","Error","parsedMappings","parseMappings","createSetter","first","second","mapping","vmKey","slice","lastIndexOf","mutation","commit","setters","findInstance","findValue","indexOf","warn","pushers","mutationName","parentObj","process","env","NODE_ENV","push","removers","removeVal","filter","val"],"mappings":"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"}